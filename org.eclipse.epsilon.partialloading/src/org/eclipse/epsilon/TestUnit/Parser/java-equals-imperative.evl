model javaMM driver EMF {
nsuri = "http://www.eclipse.org/MoDisco/Java/0.2.incubation/java" 
};

@cached
operation AbstractTypeDeclaration getPublicMethods() : Collection {
    return self.bodyDeclarations.select(bd | bd.isKindOf(MethodDeclaration) and 
        bd.modifier.isDefined() and bd.modifier.visibility == VisibilityKind#public);
}

operation AbstractTypeDeclaration getEqualsMethod() : MethodDeclaration {
	return self.getPublicMethods().selectOne(method |
			method.name == "equals" and
			method.parameters.size() == 1 and
			method.parameters.first().type.type.name == "Object" and
			method.returnType.type.isTypeOf(PrimitiveTypeBoolean));
}

operation AbstractTypeDeclaration getHashCodeMethod() : MethodDeclaration {
	return self.getPublicMethods().selectOne(method |
			method.name == "hashCode" and
			method.parameters.isEmpty() and
			method.returnType.type.isTypeOf(PrimitiveTypeInt));
}

pre {
	var loneHCs = new ConcurrentSet;
	var loneEQs = new ConcurrentSet;
}

context ClassDeclaration {

	constraint hcAndEqContract {
		check {
			var hc = self.getHashCodeMethod();
			var eq = self.getEqualsMethod();
			var hasHC = hc.isDefined();
			var hasEQ = eq.isDefined();
			if (hasEQ and not hasHC) {
				loneEQs.add(eq);
			}
			if (hasHC and not hasEQ) {
				loneHCs.add(hc);
				return false;
			}
			else return true;
		}
	}
}

post {
	("# of hashCode without equals: "+loneHCs.size()).println();
	("# of equals without hashCode: "+loneEQs.size()).println();
}