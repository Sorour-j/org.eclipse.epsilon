model java driver EMF {
nsuri = "http://www.eclipse.org/MoDisco/Java/0.2.incubation/java" 
};

operation AbstractTypeDeclaration implements(type : String) {
	return self.superInterfaces.exists(si | si.type.name == type);
}

@cached
operation AbstractTypeDeclaration getMethods() : Collection {
	return self.bodyDeclarations.select(bd | bd.isKindOf(MethodDeclaration));
}
@cached
operation AbstractTypeDeclaration getPublicMethods() : Collection {
	return self.bodyDeclarations.select(bd |
		bd.isKindOf(MethodDeclaration) and
		bd.modifier.isDefined() and
		bd.modifier.visibility == VisibilityKind#public
	);
}

@cached
operation AbstractTypeDeclaration getPublicFields() : Collection {
	return self.bodyDeclarations.select(bd |
		bd.isKindOf(FieldDeclaration) and
		bd.modifier.isDefined() and
		bd.modifier.visibility == VisibilityKind#public
	);
}

operation MethodDeclaration isEquals() : Boolean {
	return self.name == "equals" and
		self.parameters.size() == 1 and
		self.parameters.first().type.type.name == "Object" and
		self.thrownExceptions.isEmpty() and
		self.returnType.isDefined() and
		self.returnType.type.isTypeOf(PrimitiveTypeBoolean) and
		self.modifier.isDefined() and
		self.modifier.visibility == VisibilityKind#public;
}

operation MethodDeclaration isHashcode() : Boolean {
	return self.name == "hashCode" and
		self.parameters.isEmpty() and
		self.thrownExceptions.isEmpty() and
		self.returnType.isDefined() and
		self.returnType.type.isTypeOf(PrimitiveTypeInt) and
		self.modifier.isDefined() and
		self.modifier.visibility == VisibilityKind#public;
}

operation MethodDeclaration isToString() : Boolean {
	return self.name == "toString" and
		self.parameters.isEmpty() and
		self.thrownExceptions.isEmpty() and
		self.returnType.isDefined() and
		(self.returnType.type.name.equals("String") or
		self.returnType.type.name.equals("java.lang.String")) and
		self.modifier.isDefined() and
		self.modifier.visibility == VisibilityKind#public;
}

operation MethodDeclaration isClone() : Boolean {
	return self.name == "clone" and
		self.parameters.isEmpty() and
		self.returnType.isDefined() and
		self.thrownExceptions.size() == 1 and
		self.thrownExceptions.first().type.name == "CloneNotSupportedException" and
		self.modifier.isDefined() and
		self.modifier.visibility == VisibilityKind#public;
}

operation MethodDeclaration isFinalize() : Boolean {
	return self.name == "finalize" and
		self.parameters.isEmpty() and
		self.thrownExceptions.size() == 1 and
		self.thrownExceptions.first().type.name == "Throwable" and
		self.modifier.isDefined() and
		(self.modifier.visibility == VisibilityKind#public or
		self.modifier.visibility == VisibilityKind#protected);
}

operation MethodDeclaration isCompareTo() : Boolean {
	return self.name == "compareTo" and
		self.parameters.size() == 1 and
		self.thrownExceptions.isEmpty() and
		self.returnType.isDefined() and
		self.returnType.type.isTypeOf(PrimitiveTypeInt) and
		self.modifier.isDefined() and
		self.modifier.visibility == VisibilityKind#public;
}

context ClassDeclaration {
	constraint publicFieldsOnlyInPOJO {
		guard: self.getPublicFields().notEmpty()
		check: self.bodyDeclarations.select(bd |
			bd.isKindOf(MethodDeclaration) and
			(bd.modifier.isUndefined() or (bd.modifier.static.isDefined() and bd.modifier.static))
			and not (
				bd.isEquals() or bd.isHashcode() or bd.isToString()
				or bd.isFinalize() or bd.isClone() or bd.isCompareTo()
			)
		).isEmpty()
	}

	@parallel
	constraint hashCodeAndEquals {
		check {
			var hasEquals = self.getMethods().exists(md | md.isEquals());
			var hasHashcode = self.getMethods().exists(md | md.isHashcode());
			return
				(hasEquals implies hasHashcode) and
				(hasHashcode implies hasEquals);
		}
	}
	
	constraint noCovariantEquals {
		guard: self.getMethods().exists(method |
			method.name = "equals" and
			method.returnType.isDefined() and
			method.returnType.type.isTypeOf(PrimitiveTypeBoolean)
		)
		check: self.getMethods().exists(md | md.isEquals())
	}
	
	constraint noCovariantCompareTo {
		guard: self.getMethods().exists(method | 
			method.name == "compareTo" and
			method.returnType.isDefined() and
			method.returnType.type.isTypeOf(PrimitiveTypeInt)
		)
		check: self.getMethods().exists(md | md.isCompareTo())
	}
	
	@parallel
	constraint equalsAndCompareTo {
		guard: self.getMethods().exists(md | md.isCompareTo())
		check: self.getMethods().exists(md | md.isEquals())
	}
	
	constraint cloneInCloneable {
		guard: self.implements("Cloneable")
		check: self.getMethods().exists(md | md.isClone())
	}
	
	constraint serialUIDInSerializableClass {
		guard: self.implements("Serializable")
		check: self.bodyDeclarations.exists(bd |
			bd.isKindOf(FieldDeclaration) and
			bd.name == "serialVersionUID" and
			bd.modifier.static and
			bd.modifier.inheritance == InheritanceKind#final and
			bd.type.type.isTypeOf(PrimitiveTypeLong)
		)
	}
	
	@parallel
	constraint noRedundantInterfaceImpl {
		guard: self.superInterfaces.isDefined() and
			self.superClass.isDefined() and
			self.superClass.type.isKindOf(ClassDeclaration) and
			self.superClass.type.superInterfaces.isDefined()
		
		check: self.superInterfaces.exists(tIface |
			self.superClass.type.isKindOf(AbstractTypeDeclaration) implies (
				self.superClass.type.superInterfaces.includes(tIface)
			)
		)
	}
	
	constraint comparatorImplementsSerializable {
		guard: self.implements("Comparator")
		check: self.implements("Serializable")
	}
	
	@parallel
	constraint noObscuredVariables {
		check {
			var fields = self.bodyDeclarations.select(bd | bd.isKindOf(FieldDeclaration));
			return
				self.bodyDeclarations
					.select(bd | bd.isKindOf(AbstractMethodDeclaration))
					.forAll(md | md.body.isDefined() implies md.body.statements
						.select(s | s.isKindOf(VariableDeclaration))
						.forAll(vd | fields.forAll(fd | fd.name <> vd.name))
					);
		}
	}
}