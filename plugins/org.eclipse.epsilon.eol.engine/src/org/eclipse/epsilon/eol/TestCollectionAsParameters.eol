var col : Collection;
/*Parameter Collection<Any> might not match, as it requires Sequence<Any>*/ 
getSequence(col); 
/*Parameter Collection<Any> might not match, as it requires Set<Any>*/ 
getSet(col);	
/*Parameter Collection<Any> might not match, as it requires OrderedSet<Any>*/ 
getOrderedSet(col);	
/*Parameter Collection<Any> might not match, as it requires Bag<Any>*/ 
getBag(col);	
 /**/                        
 getCollection(col);

var bag : Bag;
/*Parameters type mismatch*/ getSequence(bag); 
/*Parameters type mismatch*/ getSet(bag);	
/*Parameters type mismatch*/ getOrderedSet(bag);	
/**/                         getBag(bag); 
/**/ 						 getCollection(bag); 

var ordered : OrderedSet;
/*Parameters type mismatch*/ getSequence(ordered); 
/*Parameters type mismatch*/ getSet(ordered);	
/*Parameters type mismatch*/ getBag(ordered);	
/**/ 						 getCollection(ordered); 
/**/                         getOrderedSet(ordered); 

var set : Set;
/*Parameters type mismatch*/ getSequence(set); 
/*Parameters type mismatch*/ getOrderedSet(set);	
/*Parameters type mismatch*/ getBag(set);
/**/ 						 getCollection(set); 
/**/						 getSet(set);

var seq : Sequence;
/*Parameters type mismatch*/ getSet(seq);	
/*Parameters type mismatch*/ getOrderedSet(seq);	
/*Parameters type mismatch*/ getBag(seq);	
/**/	                     getCollection(seq); 
/**/						 getSequence(seq); 

operation getSequence (c : Sequence) : Integer {
	return 1;
}
operation getSet (c : Set) : Integer {
	return 2;
}
operation getOrderedSet (c : OrderedSet) : Integer {
	return 3;
}
operation getBag(c : Bag) : Integer {
	return 4;
}
operation getCollection (c : Collection) : Integer {
	return 5;
}
