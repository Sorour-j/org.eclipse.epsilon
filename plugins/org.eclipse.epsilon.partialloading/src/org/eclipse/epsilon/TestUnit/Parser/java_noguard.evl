model java driver EMF {
nsuri = "http://www.eclipse.org/MoDisco/Java/0.2.incubation/java" 
};

operation InfixExpression operatorIsEquality() : Boolean {
	return self.operator == InfixExpressionKind#EQUALS or self.operator == InfixExpressionKind#NOT_EQUALS;
}

operation Modifier isLocal() : Boolean {
	return self.visibility == VisibilityKind#private or self.visibility == VisibilityKind#none;
}

operation AbstractTypeDeclaration implements(type : String) {
	return self.superInterfaces.exists(si | si.type.name == type);
}

operation AbstractTypeDeclaration getMethods() : Collection {
	return self.bodyDeclarations.select(bd | bd.isKindOf(MethodDeclaration));
}

operation ClassDeclaration hasEquals() : Boolean {
	return self.getMethods().exists(method |
			method.name == "equals" and
			method.parameters.size() == 1 and
			method.parameters.first().type.type.name == "Object" and
			method.thrownExceptions.isEmpty() and
			method.modifier.isDefined() and
			method.modifier.visibility == VisibilityKind#public and
			method.returnType.type.isTypeOf(PrimitiveTypeBoolean)
	);
}

operation ClassDeclaration hasHashcode() : Boolean {
	return self.getMethods().exists(method |
			method.name == "hashCode" and
			method.parameters.isEmpty() and
			method.thrownExceptions.isEmpty() and
			method.modifier.isDefined() and
			method.modifier.visibility == VisibilityKind#public and
			method.returnType.type.isTypeOf(PrimitiveTypeInt)
	);
}

operation ClassDeclaration hasCompareTo() : Boolean {
	return self.getMethods().exists(method | 
			method.name == "compareTo" and
			method.parameters.size() == 1 and
			method.parameters.first().type.type.name == "Object" and
			method.modifier.isDefined() and
			method.modifier.visibility == VisibilityKind#public and
			method.thrownExceptions.isEmpty() and
			method.returnType.type.isTypeOf(PrimitiveTypeInt)
	);
}

context MethodInvocation {
	//guard: self.method.isDefined()
	
	constraint doesNotCallFinalize {
		check: self.method.isDefined() implies
			not (
				self.method.name == "finalize" and
				self.method.parameters.isEmpty()
			) 
	}
	
	constraint doesNotCallExit {
		check: self.method.isDefined() implies
			not (
				self.method.name = "exit" and
				self.method.parameters.size() == 1 and
				self.method.parameters.first().type.type.isTypeOf(PrimitiveTypeInt)
			)
	}
	
	constraint doesNotCallRunFinalizers {
		check: self.method.isDefined() implies
			not (
				self.method.name = "runFinalizersOnExit" and
				self.method.parameters.size() == 1 and
				self.method.parameters.first().type.type.isTypeOf(PrimitiveTypeBoolean)
			)
	}
}

context MethodDeclaration {
	constraint shouldStartWithLowerCase {
		check: self.name.firstToLowerCase() == self.name
	}
}

context AbstractMethodDeclaration {
	constraint localMethodIsUsed {
		//guard: self.modifier.isDefined() and self.modifier.isLocal()
		check: self.modifier.isDefined() and self.modifier.isLocal() implies
			self.usages.notEmpty()
	}
	
	constraint parametersEffectivelyFinal {
		//guard: self.body.isDefined() and self.parameters.notEmpty()
		check: self.body.isDefined() and self.parameters.notEmpty() implies
			self.body.statements
				.select(s |
					s.isKindOf(ExpressionStatement) and
					s.expression.isKindOf(Assignment)
				)
				.collect(s | s.expression)
				.select(assignment |
					assignment.leftHandSide.isKindOf(SingleVariableAccess) and
					assignment.operator == AssignmentKind#ASSIGN and
					assignment.leftHandSide.isKindOf(SingleVariableAccess) and
					self.parameters.excludes(assignment.leftHandSide.variable)
				)
				.isEmpty()
	}
}

context Assignment {
	constraint noRedundantAssignments {
		//guard: self.operator == AssignmentKind#ASSIGN
		check: self.operator == AssignmentKind#ASSIGN implies
			self.leftHandSide <> self.rightHandSide
	}
}

context VariableDeclaration {
	constraint variableIsUsed {
		check: self.usageInVariableAccess.notEmpty()
	}
}

context VariableDeclarationStatement {
	constraint publicVariableIsFinal {
		//guard: self.modifier.visibility == VisibilityKind#public
		check: self.modifier.visibility == VisibilityKind#public implies
			self.modifier.inheritance == InheritanceKind#final
	}
}

context VariableDeclarationExpression {
	constraint publicVariableIsFinal {
		//guard: self.modifier.visibility == VisibilityKind#public
		check: self.modifier.visibility == VisibilityKind#public implies
			self.modifier.inheritance == InheritanceKind#final
	}
}

context CatchClause {
	constraint exceptionIsUsed {
		check: self.exception.usageInVariableAccess.notEmpty()
	}
	constraint doesNotCatchDubiousExceptions {
		check: self.exception.type.type.name <> "IllegalMonitorStateException"
	}
}

context Block {
	constraint emptyBlockIsDocumented {
		//guard: self.statements.isEmpty()
		check: self.statements.isEmpty() implies
			self.comments.notEmpty()
	}
}

context SwitchStatement {
	constraint moreThan3Cases {
		check: self.statements.size() > 3
	}
}

context SuperConstructorInvocation {
	constraint noRedundantSuperCall {
		check: self.arguments.notEmpty()
	}
}

context IfStatement {
	constraint noDeadCode {
		check: not self.expression.isKindOf(TypeLiteral)
	}
	
	constraint noUselessControlFlow {
		check:
			not self.thenStatement.isTypeOf(EmptyStatement) and
			(self.elseStatement.isDefined() implies not self.elseStatement.isTypeOf(EmptyStatement))
	}
}

context ClassDeclaration {
	constraint hashCodeAndEquals {
		check {
			var hasEquals = self.hasEquals();
			var hasHashcode = self.hasHashcode();
			return
				(hasEquals implies hasHashcode) and
				(hasHashcode implies hasEquals);
		}
	}
	
	constraint noCovariantEquals {
		/*guard: self.getMethods().exists(method |
			method.name = "equals" and
			method.modifier <> null and
			method.modifier.visibility = VisibilityKind#public and
			method.returnType.type.isTypeOf(PrimitiveTypeBoolean)
		)*/
		check: self.getMethods().exists(method |
			method.name = "equals" and
			method.modifier <> null and
			method.modifier.visibility = VisibilityKind#public and
			method.returnType.type.isTypeOf(PrimitiveTypeBoolean)
		) implies
			self.hasEquals()
	}
	
	constraint noCovariantCompareTo {
		/*guard: self.getMethods().exists(method | 
			method.name == "compareTo" and
			method.modifier.isDefined() and
			method.modifier.visibility == VisibilityKind#public and
			method.returnType.type.isTypeOf(PrimitiveTypeInt)
		)*/
		check: self.getMethods().exists(method | 
			method.name == "compareTo" and
			method.modifier.isDefined() and
			method.modifier.visibility == VisibilityKind#public and
			method.returnType.type.isTypeOf(PrimitiveTypeInt)
		) implies
			self.hasCompareTo()
	}
	
	constraint equalsAndCompareTo {
		//guard: self.hasCompareTo()
		check: self.hasCompareTo() implies
			self.hasEquals()
	}
	
	constraint cloneInCloneable {
		//guard: self.implements("Cloneable")
		check: self.implements("Cloneable") implies
			self.getMethods().exists(md |
				md.name == "clone" and
				md.parameters.isEmpty() and
				md.thrownExceptions.size() == 1 and
				md.thrownExceptions.first().type.name == "CloneNotSupportedException" and
				md.modifier.isDefined() and
				md.modifier.visibility == VisibilityKind#public
			)
	}
	
	constraint serialUIDInSerializableClass {
		//guard: self.implements("Serializable")
		check: self.implements("Serializable") implies
			self.bodyDeclarations.exists(bd |
				bd.isKindOf(FieldDeclaration) and
				bd.name == "serialVersionUID" and
				bd.modifier.static and
				bd.modifier.inheritance == InheritanceKind#final and
				bd.type.type.isTypeOf(PrimitiveTypeLong)
			)
	}
	
	constraint noRedundantInterfaceImpl {
		/*guard: self.superInterfaces.isDefined() and
			self.superClass.isDefined() and
			self.superClass.type.isKindOf(ClassDeclaration) and
			self.superClass.type.superInterfaces.isDefined()
		*/
		check: self.superInterfaces.isDefined() and
			self.superClass.isDefined() and
			self.superClass.type.isKindOf(ClassDeclaration) and
			self.superClass.type.superInterfaces.isDefined() implies
				self.superInterfaces.exists(tIface |
				self.superClass.type.isKindOf(AbstractTypeDeclaration) implies (
					self.superClass.type.superInterfaces.includes(tIface)
				)
		)
	}
	
	constraint comparatorImplementsSerializable {
		//guard: self.implements("Comparator")
		check: self.implements("Comparator") implies
			self.implements("Serializable")
	}
	
	
}

context CompilationUnit {
	constraint allImportsAreUsed {
		check: self.imports.forAll(imp |
			NamedElement.allInstances().exists(ne | ne.originalCompilationUnit == self)
		)
	}
}

context InfixExpression {
	constraint noRedundantComparison {
		check: self.leftOperand <> self.rightOperand
	}
	
	constraint equalsNotOnLiterals {
		//guard: self.operatorIsEquality()
		check: self.operatorIsEquality() implies (
			self.leftOperand.type == self.rightOperand.type and not (
					self.leftOperand.isTypeOf(StringLiteral) or
					self.leftOperand.isTypeOf(NumberLiteral) or
					self.leftOperand.isTypeOf(CharacterLiteral) or
					self.leftOperand.isTypeOf(BooleanLiteral) or
					self.leftOperand.isTypeOf(NullLiteral) or
					self.leftOperand.isTypeOf(TypeLiteral)
				)
			)
	}
	
	constraint equalsNotOnStrings {
		//guard: self.operatorIsEquality()
		check: self.operatorIsEquality() implies
			not (
				self.leftOperand.isTypeOf(StringLiteral) or
				self.rightOperand.isTypeOf(StringLiteral)
			)
	}
}

context SynchronizedStatement {
	constraint hasStatements {
		check: self.body.statements.notEmpty()
	}
}