model javaMM driver EMF {
nsuri = "http://www.eclipse.org/MoDisco/Java/0.2.incubation/java" 
};


var a:new MethodInvocation;
for (a in MethodInvocation.all){
	a.doesNotCallFinalize();
	a.doesNotCallExit();
	a.doesNotCallRunFinalizers();
}
var m:new MethodDeclaration;
for (m in MethodDeclaration.all){
	m.shouldStartWithLowerCase();
}

var ab:new Assignment;
for (ab in Assignment.all){
	ab.noRedundantAssignments();
}

var c:new CatchClause;
for (c in CatchClause.all){
	c.exceptionIsUsed();
	c.doesNotCatchDubiousExceptions();
}

var b:new Block;
for (b in Block.all){
	b.emptyBlockIsDocumented();
}

var sw:new SwitchStatement;
for (sw in SwitchStatement.all){
	sw.moreThan3Cases();
}

var s:new SuperConstructorInvocation;
for (s in SuperConstructorInvocation.all){
	s.noRedundantSuperCall();
} 

var i:new IfStatement;
for (i in IfStatement.all){
	i.noDeadCode();
	i.noUselessControlFlow();
}

var ie:new InfixExpression;
for (ie in InfixExpression.all){

	ie.equalsNotOnStrings();
	ie.equalsNotOnLiterals();
	ie.noRedundantComparison();
}

var cd:new ClassDeclaration;
for (cd in ClassDeclaration.all){
	cd.publicFieldsOnlyInPOJO();
	cd.hashCodeAndEquals();
	cd.noCovariantEquals();
	cd.noCovariantCompareTo();
	cd.equalsAndCompareTo();
	cd.cloneInCloneable();
	cd.serialUIDInSerializableClass();
//	cd.noRedundantInterfaceImpl();
	cd.comparatorImplementsSerializable();
	cd.noObscuredVariables();
}

/*Constraints*/

operation NamedElement notReservedWord() : Boolean{

		if (self.name <> "var" and self.name <> "_" and
			self.name <> "strictfp" and self.name <> "assert" and
			self.name <> "enum")				
			return true;
		else
			return false;
}

operation TypeDeclaration shouldStartWithUpperCase() : Boolean{
	
		if (self.name.firstToUpperCase() == self.name)
			return true;
		else
			return false;	
}

operation MethodInvocation doesNotCallFinalize() : Boolean{
	if (self.method.isDefined())
		if (self.method.name == "finalize" and self.method.parameters.isEmpty())
		 	return false;
		else
			return true;
}

operation MethodInvocation doesNotCallExit() : Boolean {
		if( self.method.isDefined() and
		self.method.name = "exit" and self.method.parameters.size() == 1 and
			self.method.parameters.first().type.type.isTypeOf(PrimitiveTypeInt)
		  )
		  return false;
		else
		  return true;
}

operation MethodInvocation doesNotCallRunFinalizers() : Boolean {
		if( self.method.isDefined() and // New condition
			self.method.name = "runFinalizersOnExit" and 
			self.method.parameters.size() == 1 and
			self.method.parameters.first().type.type.isTypeOf(PrimitiveTypeBoolean))
		  return false;
		 else
		 return true;
}
operation MethodDeclaration shouldStartWithLowerCase() {
		if (self.name.isDefined() and
		self.name.firstToLowerCase() == self.name)
			return true;
		else
			return false;
}

operation AbstractMethodDeclaration canBeLocal() : Boolean {
		if (self.modifier.isDefined() and not self.modifier.isLocal()){
		  if(self.usages.exists(m | m.originalClassFile <> self.originalClassFile))
		  	return true;
		  else
			return false;
		 }
		else
			return false;
}

operation AbstractMethodDeclaration localMethodIsUsed() : Boolean {
		if(self.modifier.isDefined() and self.modifier.isLocal())
			if (self.usages.notEmpty())
				return true;
			else return false;
		else
			return false;
	}
	
operation AbstractMethodDeclaration parametersEffectivelyFinal() : Boolean {
		if (self.body.isDefined() and self.parameters.notEmpty())
			if (self.body.statements
				.select(s:ExpressionStatement |
					s.expression.isKindOf(Assignment)
				)
				.collect(s | s.expression)
				.select(assignment |
					assignment.leftHandSide.isKindOf(SingleVariableAccess) and
					assignment.operator == AssignmentKind#ASSIGN and
					assignment.leftHandSide.isKindOf(SingleVariableAccess) and
					self.parameters.excludes(assignment.leftHandSide.variable)
				)
				.isEmpty()
				)
				return true;
			else
				return false;
		else
			return false;
}
	
operation Assignment noRedundantAssignments() : Boolean {
		if (self.operator == AssignmentKind#ASSIGN){
		    if (self.leftHandSide <> self.rightHandSide)
		    	return true;
		    else
		    	return false;
		    }
		else
			return false;	    
}

operation VariableDeclaration variableIsUsed() : Boolean {
		if (self.usageInVariableAccess.notEmpty())
			return true;
		else
			return false;
}

operation VariableDeclarationStatement publicVariableIsFinal() : Boolean {
		if (self.modifier.visibility == VisibilityKind#public){
			
			if (self.modifier.inheritance == InheritanceKind#final)
				return true;
			else
				return false;
			}
		else
			return false;
}

operation VariableDeclarationExpression publicVariableIsFinal() : Boolean {
		if (self.modifier.visibility == VisibilityKind#public){
		   if(self.modifier.inheritance == InheritanceKind#final)
		   	return true;
		   else
		   	return false;
		}
		else
			return false;
}

operation CatchClause exceptionIsUsed() : Boolean {
		if(self.exception.isDefined() and 
		self.exception.usageInVariableAccess.notEmpty())
			return true;
		else
			return false;
	}
	
operation CatchClause doesNotCatchDubiousExceptions() : Boolean{
		if (self.exception.isDefined() and
		self.exception.type.type.name <> "IllegalMonitorStateException")
			return true;
		else
			return false;
}

operation Block emptyBlockIsDocumented() : Boolean {
		if (self.statements.isEmpty()){
			if (self.comments.notEmpty())
				return true;
			else
				return false;
			}
		else
			return false;
}
operation SwitchStatement moreThan3Cases() : Boolean {
		if (self.statements.size() > 3)
			return true;
		else
			return false;
}

operation SuperConstructorInvocation noRedundantSuperCall() : Boolean {
		if (self.arguments.notEmpty())
			return true;
		else
			return false;
}

operation IfStatement noDeadCode() : Boolean {
		if (not self.expression.isKindOf(TypeLiteral))
		 	return true;
		 else
		 	return false;
}
	
operation IfStatement noUselessControlFlow() : Boolean {
		if( not self.thenStatement.isTypeOf(EmptyStatement) and
			(self.elseStatement.isDefined() implies not self.elseStatement.isTypeOf(EmptyStatement)))
			return true;
		else
			return false;
}

operation ClassDeclaration publicFieldsOnlyInPOJO() : Boolean {
		if (self.getPublicFields().notEmpty()){
			if(self.bodyDeclarations.select(bd : MethodDeclaration |
				(bd.modifier.isUndefined() or (bd.modifier.static.isDefined() and bd.modifier.static))
				and not (
					bd.isEquals() or bd.isHashcode() or bd.isToString()
					or bd.isFinalize() or bd.isClone() or bd.isCompareTo()
					)
				).isEmpty())
				return true;
		}
		else
			return false;
}

operation ClassDeclaration hashCodeAndEquals() : Boolean {
			var hasEquals = self.getMethods().exists(md | md.isEquals());
			var hasHashcode = self.getMethods().exists(md | md.isHashcode());
			return ((hasEquals implies hasHashcode) and (hasHashcode implies hasEquals));
}

operation ClassDeclaration noCovariantEquals() : Boolean {
		if(self.getMethods().exists(method |
			method.name = "equals" and
			method.returnType.isDefined() and
			method.returnType.type.isTypeOf(PrimitiveTypeBoolean)
		)){
			if (self.getMethods().exists(md | md.isEquals()))
				return true;
			else
				return false;
	}
	else
		return false;
}
operation ClassDeclaration noCovariantCompareTo() : Boolean {
		if (self.getMethods().exists(method | 
			method.name == "compareTo" and
			method.returnType.isDefined() and
			method.returnType.type.isTypeOf(PrimitiveTypeInt)
		)){
			if( self.getMethods().exists(md | md.isCompareTo()))
				return true;
			else
				return false;
		}
		else
			return false;
}
	
operation ClassDeclaration equalsAndCompareTo() : Boolean {
		if (self.getMethods().exists(md | md.isCompareTo())){
		   if (self.getMethods().exists(md | md.isEquals()))
		   		return true;
		   	else
		   		return false;
		}
		else
			return false;
}

operation ClassDeclaration cloneInCloneable() : Boolean {
		if(self.implements.isDefined() and self.implements("Cloneable")){
			if( self.getMethods().exists(md | md.isClone()))
				return true;
			else
				return false;
		}
		else
			return false;
}

operation ClassDeclaration serialUIDInSerializableClass() : Boolean {
		
		if (self.implements.isDefined() and self.implements("Serializable")){
		
			if (self.bodyDeclarations.exists(bd:FieldDeclaration |
				bd.name == "serialVersionUID" and
				bd.modifier.static and
				bd.modifier.inheritance == InheritanceKind#final and
				bd.type.type.isTypeOf(PrimitiveTypeLong)
			))
				return true;
			else
				return false;
		}
		else
			return false;
}	

operation ClassDeclaration noRedundantInterfaceImpl() : Boolean {
		
		if (self.superInterfaces.isDefined() and self.superClass.isDefined())
		 {
		 	if(self.superClass.type.isDefined() and 
		      self.superClass.type.isKindOf(ClassDeclaration) and 
		    	self.superClass.type.superInterfaces.isDefined())
	
		       	   if (self.superInterfaces.exists(tIface |self.superClass.type.isKindOf(AbstractTypeDeclaration) implies self.superClass.type.superInterfaces.includes(tIface)))
					//)){
						return true;
		}
	//			else
	//					return false;
	//		}
	//		else
	//			return false;
	//		}
		else
			return false;
}

operation ClassDeclaration comparatorImplementsSerializable() : Boolean {
		if (self.implements.isDefined() and self.implements("Comparator")){
			if(self.implements("Serializable"))
				return true;
			else
				return false;
		}
		else
			return false;
}
	
operation ClassDeclaration noObscuredVariables() : Boolean {

		if (self.bodyDeclarations.isDefined()){
		
			var fields = self.bodyDeclarations.select(bd | bd.isKindOf(FieldDeclaration));
			var bd = self.bodyDeclarations.select(bd | bd.isKindOf(AbstractMethodDeclaration));
				return
					bd.forAll(md | md.body.isDefined() implies md.body.statements
							.select(s | s.isKindOf(VariableDeclaration))
							.forAll(vd | fields.forAll(fd | fd.name <> vd.name))
					);
		}
}

operation InfixExpression noRedundantComparison() : Boolean {
		 if (self.leftOperand <> self.rightOperand)
		 		return true;
		 else
		 	return false;
}

operation InfixExpression equalsNotOnLiterals() : Boolean {
		if (self.operatorIsEquality()){
		    if (self.leftOperand.type == self.rightOperand.type and not (
				self.leftOperand.isTypeOf(StringLiteral) or
				self.leftOperand.isTypeOf(NumberLiteral) or
				self.leftOperand.isTypeOf(CharacterLiteral) or
				self.leftOperand.isTypeOf(BooleanLiteral) or
				self.leftOperand.isTypeOf(NullLiteral) or
				self.leftOperand.isTypeOf(TypeLiteral)
			))
				return true;
		}
		else
			return false;
}
	
operation InfixExpression equalsNotOnStrings() : Boolean {
		if(self.operatorIsEquality()){
			if (not (self.leftOperand.isTypeOf(StringLiteral) or
					 self.rightOperand.isTypeOf(StringLiteral)))
				return true;
		}
		else
			return false;
}
operation SynchronizedStatement hasStatements() : Boolean {
		if (self.body.statements.notEmpty())
			return true;
		else
			return false;
}

/*Operations*/

operation MethodDeclaration isEquals() : Boolean {
	return 	
	    self.name == "equals" and
		self.parameters.size() == 1 and
		//self.parameters.first().type.type.name == "Object" and
		self.thrownExceptions.isEmpty() and
		self.returnType.isDefined() and
	 	self.returnType.type.isTypeOf(PrimitiveTypeBoolean) and
		self.modifier.isDefined() and
		self.modifier.visibility == VisibilityKind#public;
}

operation MethodDeclaration isHashcode() : Boolean {
	return self.name == "hashCode" and
		self.parameters.isEmpty() and
		self.thrownExceptions.isEmpty() and
		self.returnType.isDefined() and self.returnType.type.isTypeOf(PrimitiveTypeInt) and
		self.modifier.isDefined() and
		self.modifier.visibility == VisibilityKind#public;
}

operation MethodDeclaration isToString() : Boolean {
	return self.name == "toString" and
		self.parameters.isEmpty() and
		self.thrownExceptions.isEmpty() and
		self.returnType.isDefined() and
		(self.returnType.type.name == "String" or
		self.returnType.type.name == "java.lang.String") and
		self.modifier.isDefined() and
		self.modifier.visibility == VisibilityKind#public;
}

operation MethodDeclaration isClone() : Boolean {
	return self.name == "clone" and
		self.parameters.isEmpty() and
		self.returnType.isDefined() and
		self.thrownExceptions.size() == 1 and
		self.thrownExceptions.first().type.name == "CloneNotSupportedException" and
		self.modifier.isDefined() and
		self.modifier.visibility == VisibilityKind#public;
}

operation MethodDeclaration isFinalize() : Boolean {
	return self.name == "finalize" and
		self.parameters.isEmpty() and
		self.thrownExceptions.size() == 1 and
		self.thrownExceptions.first().type.name == "Throwable" and
		(self.returnType.isUndefined() or self.returnType.type.isTypeOf(PrimitiveTypeVoid)) and
		self.modifier.isDefined() and
		(self.modifier.visibility == VisibilityKind#public or
		self.modifier.visibility == VisibilityKind#protected);
}

operation MethodDeclaration isCompareTo() : Boolean {
	return (self.name == "compareTo" and
		self.parameters.size() == 1 and
		self.thrownExceptions.isEmpty() and
		self.returnType.isDefined() and
		self.returnType.type.isTypeOf(PrimitiveTypeInt) and
		self.modifier.isDefined() and
		self.modifier.visibility == VisibilityKind#public);
}


operation InfixExpression operatorIsEquality() : Boolean {
	return self.operator == InfixExpressionKind#EQUALS or self.operator == InfixExpressionKind#NOT_EQUALS;
}

operation Modifier isLocal() : Boolean {
	return self.visibility == VisibilityKind#private or self.visibility == VisibilityKind#none;
}

operation AbstractTypeDeclaration implements(type : String) {

	if (self.superInterfaces.isDefined())
		return self.superInterfaces.exists(si | si.type.name == type);
	else
		return false;
}

@cached
operation AbstractTypeDeclaration getMethods() : Collection {
	if (self.bodyDeclarations.isDefined())
		return self.bodyDeclarations.select(bd |bd.isKindOf(MethodDeclaration));
}

@cached
operation AbstractTypeDeclaration getPublicFields() : Collection {
	if (self.bodyDeclarations.isDefined())
		return self.bodyDeclarations.select(bd:FieldDeclaration |
			bd.modifier.isDefined() and
			bd.modifier.visibility == VisibilityKind#public
	);
}
